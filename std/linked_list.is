import stdlib;
import stdmem;

struct LinkedListNode {
    value: @void;
    next: @LinkedListNode;
}

struct LinkedList {
    first: @LinkedListNode;
    size: usize;
}

func LinkedList_new(@LinkedList) {
    let list: @LinkedList = <!@LinkedList> malloc(sizeof(LinkedList));

    list->size = 0;

    return list;
}

func LinkedList_push(void, list: @LinkedList, value: @void) {
    let node: @LinkedListNode = <!@LinkedListNode> malloc(sizeof(LinkedListNode));

    node->value = value;
    print("alloc: ");
    print_int(<!int> node);
    print_char('\n');

    if (list->size > 0) {
        let index: usize = list->size - <!usize> 1;
        let end: @LinkedListNode = LinkedList_get(list, index);
        print("end: ");
        print_int(<!int> end);
        print_char('\n');
        print("...this is a very long message");
        end->next = node;
    } else {
        list->first = node;
    }
    print_char('\n');

    list->size = list->size + <!usize> 1;
}

func LinkedList_get(@LinkedListNode, list: @LinkedList, index: usize) {
    if (index >= list->size || index < <!usize> 0) {
        print("Attempted to access index ");
        print_int(<!int> index);
        print(" in LinkedList of size ");
        print_int(<!int> list->size);
        println(".");
        exit(1);
    }

    let current: @LinkedListNode = list->first;

    print("target: ");
    print_int(<!int> index);
    print_char('\n');
    let i: usize = <!usize> 0;
    while (i < index) {
        print("from: ");
        print_int(<!int> i);
        print(", next: ");
        print_int(<!int> current->next);
        print_char('\n');
        current = current->next;

        i = i + <!usize> 1;
    }
    print("reached: ");
    print_int(<!int> i);
    print_char('\n');

    return current;
}
